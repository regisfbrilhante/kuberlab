---
# SETUP ENVIRONMENT
- hosts: all
  become: true
  tasks:

  # - name: Adjust resolv.conf file
  #   command: touch /etc/resolv.conf
  #   with_list:
  #     - touch /etc/resolv.conf
  #     - rm /etc/resolv.conf
  #     - touch /etc/resolv.conf

  - name: Setup hosts
    shell: echo "{{ item }}" >> /etc/hosts
    with_items:
      - "10.0.3.10 master"
      - "10.0.3.21 node-1"
      - "10.0.3.22 node-2"
      - "10.0.3.23 node-3"
  
  - name: Disable cloud-init ubuntu
    command: touch /etc/cloud/cloud-init.disabled  
  
  - name: Recriate a static resolv.conf file
    shell: rm -f /etc/resolv.conf; touch /etc/resolv.conf
  
  - name: Setup DNS servers
    shell: echo "nameserver 8.8.8.8" > /etc/resolv.conf ; echo "nameserver 8.8.4.4" >> /etc/resolv.conf; 

  # PACKAGES 
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - gnupg2
      - ufw


  # INSTALL DOCKER
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  # - name: Creating /etc/docker/daemon.json file
  #   command: touch /etc/docker/daemon.json 

  # - name: Create system docker service
  #   blockinfile:
  #     path: /etc/docker/daemon.json
  #     create: yes
  #     marker: ""
  #     block: |
  #       {
  #         "exec-opts": ["native.cgroupdriver=systemd"],
  #           "log-driver": "json-file",
  #           "log-opts": {
  #           "max-size": "100m"},
  #           "storage-driver": "overlay2"
  #       } 
          
  # - name: Create systemd docker service
  #   command: mkdir -p /etc/systemd/system/docker.service.d
  
  - name: Docker service Restart
    systemd:
      state: restarted
      daemon_reload: yes
      name: docker

  # CONFIGURING FIREWLL
  - name: UFW -> Allow ports Kubernetes and Weave Net
    ufw:
      rule: allow
      port: '{{ item }}'
      proto: tcp
    loop:
      - 6443
      - 10250
      - 10251
      - 10252
      - 6783

  - name: UFW -> Allow port range 2379-2380
    ufw:
      rule: allow
      port: 2379:2380
      proto: tcp

  - name: UFW -> Allow ports 
    ufw:
      rule: allow
      port: '{{ item }}'
      proto: udp
    loop:
      - 6783
      - 6784
    

  # INSTALL KUBERNETES
  - name: Remove swapfile from /etc/fstab
    ignore_errors: yes
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0
  
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Configure node ip
    shell: echo "KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}" > /etc/default/kubelet
   
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  
  # JOIN
  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777
  
  - name: Join the node to cluster
    command: sh /tmp/join-command.sh

  handlers:
    - name: docker status
      service: name=docker state=started