---
# INSTALL DOCKER
- hosts: all
  become: true
  tasks:

  - name: Adjust resolv.conf file
    command: touch /etc/resolv.conf
    with_list:
      - touch /etc/resolv.conf
      - rm /etc/resolv.conf
      - touch /etc/resolv.conf
  
  - name: Setup DNS servers
    shell: echo "nameserver 8.8.8.8" > /etc/resolv.conf ; echo "nameserver 8.8.4.4" >> /etc/resolv.conf; 

  
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker


  # DISABLE SWAP
  # - name: Remove swapfile from /etc/fstab
  #     mount:
  #       name: "{{ item }}"
  #       fstype: swap
  #       state: absent
  #     with_items:
  #       - swap
  #       - none

    # - name: Disable swap
    #   command: swapoff -a
    #   when: ansible_swaptotal_mb > 0

  # INSTALL KUBERNETES
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Configure node ip
    shell: echo "KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}" > /etc/default/kubelet
   
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
  


  # INITIALIZE CLUSTER
  - name: Check if intialized before
    stat:
      path: /etc/kubernetes/admin.conf
    register: kubernetes_initialized
  
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="10.0.2.10" --apiserver-cert-extra-sans="10.0.2.10"  --node-name master --pod-network-cidr=10.200.0.0/16
    when: kubernetes_initialized.stat.exists == False

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
      - mkdir -p /home/vagrant/.kube
      - cp  /etc/kubernetes/admin.conf /home/vagrant/.kube/config 
      - chown vagrant:vagrant /home/vagrant/.kube/config


  - name: Check if calico is installed
    stat:
      path: /var/log/pods/tigera-operator_tigera*
    register: calico_installed
  
  # INSTALL CALICO
  - name: Install calico pod network
    become: false
    command: kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
    when: calico_installed.stat.exists == False
    ignore_errors: yes


  # GENERATE JOIN
  - name: Generate join command
    shell: kubeadm token create --print-join-command > /tmp/join-command
  
   
  - name: Copy join command to local file
    fetch:
      src: /tmp/join-command
      dest: join-command

  - name: Remove join command
    command: rm /tmp/join-command
  
  handlers:
    - name: docker status
      service: name=docker state=started

    